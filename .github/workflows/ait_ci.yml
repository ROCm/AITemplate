name: AITemplate_ci

on:
  push:
    branches:
      - ci-setup
  pull_request:
    branches:
      - ci-setup

jobs:
  build:
    runs-on: rocm

    steps:
    - uses: actions/checkout@v2
    - name: Pull Docker
      shell: bash
      run: |
        docker pull rocm/composable_kernel:ait_rocm5.3
    - name: Get CPU info on Ubuntu
      if: contains(runner.os, 'linux')
      run: |
        cat /proc/cpuinfo
    - name: Get env vars
      run: |
        export ROCM_PATH=/opt/rocm
        export ROC_USE_FGS_KERNARG=0
        echo GITHUB_WORKFLOW   = $GITHUB_WORKFLOW
        echo HOME              = $HOME
        echo GITHUB_ACTION     = $GITHUB_ACTION
        echo GITHUB_ACTIONS    = $GITHUB_ACTIONS
        echo GITHUB_REPOSITORY = $GITHUB_REPOSITORY
        echo GITHUB_EVENT_NAME = $GITHUB_EVENT_NAME
        echo GITHUB_EVENT_PATH = $GITHUB_EVENT_PATH
        echo GITHUB_WORKSPACE  = $GITHUB_WORKSPACE
        echo GITHUB_SHA        = $GITHUB_SHA
        echo GITHUB_REF        = $GITHUB_REF
        c++ --verbose
    - name: Build and Test AITemplate
      run: |
        rocm-smi
        rocminfo | grep "gfx"
        docker run --network=host --device=/dev/kfd --device=/dev/dri/renderD129 --ipc=host --shm-size 16G --group-add video --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v ~/dockerx:/dockerx rocm/composable_kernel:ait_rocm5.3
        rm -rf AITemplate
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git -c "http.extraheader=$auth_header" -c protocol.version=2 clone --recursive -b ci-setup https://github.com/ROCmSoftwarePlatform/AITemplate.git
        # clean up and reinstall ait
        cd AITemplate
        pip3 uninstall -y aitemplate
        cd python
        rm -rf dist build
        python3 setup.py bdist_wheel
        pip3 install dist/*.whl
        cd ../examples/01_resnet-50/
        HIP_VISIBLE_DEVICES=0,1 python3 benchmark_ait.py
        for BATCH_SIZE in 1 2 4 8 16 32 64 128 256
        do
          HIP_VISIBLE_DEVICES=0 python3 benchmark_ait.py --batch-size $BATCH_SIZE
        done
        # test 2 gcd
        for BATCH_SIZE in 1 2 4 8 16 32 64 128 256
        do
          HIP_VISIBLE_DEVICES=0 python3 benchmark_ait.py --batch-size $BATCH_SIZE &
          HIP_VISIBLE_DEVICES=1 python3 benchmark_ait.py --batch-size $BATCH_SIZE && fg
        done
        ## BERT
        cd ../03_bert/
        bash ./benchmark_mi250.sh |& tee bert.log
        ## VIT
        cd ../04_vit/
        bash ./benchmark_mi250.sh |& tee vit.log

